<?php // if ( ! defined('BASEPATH')) exit('No direct script access allowed');
require(APPPATH.'/libraries/REST_Controller.php');

class Words extends REST_Controller {
    
    function __construct() {
        parent::__construct();
        // Autoloaded Config, Helpers, Models
    }

    // Used to create a new group in the DB
    public function index_post() {
        $data = $this->post();
        
        if ( isset($data['word']) ){
            $word    = $data['word']; 
            
            if ( $word != '' ){
                $word_id = false;
                $count = 0;
                while ( $insert_id ===  false ) {
                    $word_id = $this->_try_insert_word( $word, $count );
                    $count++;
                }

                echo json_encode(
                    array(
                        'status' => 'success',
                        'message' => 'Word insert successful',
                        'word_id' => $word_id
                    )
                );
            } else {
                echo json_encode(
                    array(
                        'status' => 'fail',
                        'message' => 'Word cannot be empty'
                    )
                );
            }
        } else {
            echo json_encode( 
                array(
                    'status'  => 'fail',
                    'message' => 'Missing word parameter'
                )
            );
        }

        return;
    }

    // Used to create a new group in the DB
    public function index_put() {
        $data = $this->put( );
        
        if ( isset($data['word_id']) && isset($data['word']) ){
            $word_id = $data['word_id'];
            $word    = $data['word'];

            $availability = $this->word->retrieve( 
                array(
                    'id' => $word_id
                )
            );

            if ( count($availability) > 0 ) {
                if ( $word != '' && ctype_alpha($word) ) {
                    $word_id = $this->word->update( 
                        array(
                            'id' => $word_id
                        ),
                        array(

                            'word' => $word
                        ) 
                    );
                    echo json_encode( 
                        array(
                            'status'  => 'success',
                            'message' => 'Word update successful'
                        )
                    );
                } else {
                    echo json_encode( 
                        array(
                            'status'  => 'fail',
                            'message' => 'Word must contain alphabets'
                        )
                    );
                }
            } else {
                echo json_encode( 
                    array(
                        'status'  => 'fail',
                        'message' => 'Nothing to update'
                    )
                );
            }

        } else {
            echo json_encode( 
                array(
                    'status'  => 'fail',
                    'message' => 'Missing word_id or word parameters'
                )
            );
        }
        return;
    }

    // Attempts to add the word into the database
    // If autogenerated tag for the word exists, return false
    private function _try_insert_word( $word, $count = 0 ){
        if ( $count != 0 ) {
            $word = $word . '-' . $count;
        }

        $availability = $this->word->retrieve(
            array(
                'tag' => url_title( $word )
            )
        );

        if ( count($availability) == 0 ) {
            $new_word = array(
                'tag' => url_title( $word ),
                'word' => $word
            );
        
            $word_id = $this->word->create( $new_word );
            return $word_id;
        
        } else {
            return false;
        }
    }
}
